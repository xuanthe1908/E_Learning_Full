// debugAdminLogin.js - Debug to√†n b·ªô flow ƒëƒÉng nh·∫≠p admin
const bcrypt = require('bcrypt');
const mongoose = require('mongoose');
require('dotenv').config();

// Admin Schema y h·ªát code c·ªßa b·∫°n
const adminSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    trim: true,
    unique: true,
    lowercase: true,
    match: [
      /^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/,
      'Please enter a valid email',
    ],
  },
  password: {
    type: String,
    required: true,
    minlength: 4,
  },
});

const Admin = mongoose.model('Admin', adminSchema, 'admin');

// AuthService y h·ªát code c·ªßa b·∫°n
const hashPassword = async (password) => {
  const salt = await bcrypt.genSalt(10);
  const hashedPassword = await bcrypt.hash(password, salt);
  return hashedPassword;
};

const comparePassword = (password, hashedPassword) => {
  return bcrypt.compare(password, hashedPassword);
};

async function debugAdminLogin() {
  try {
    await mongoose.connect(process.env.DATABASE);
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    console.log('üóÉÔ∏è Database URL:', process.env.DATABASE?.substring(0, 30) + '...');

    // 1. Ki·ªÉm tra admin hi·ªán t·∫°i trong DB
    console.log('\n=== 1. KI·ªÇM TRA ADMIN HI·ªÜN T·∫†I ===');
    const existingAdmins = await Admin.find({});
    console.log('üìä S·ªë l∆∞·ª£ng admin trong DB:', existingAdmins.length);
    
    existingAdmins.forEach((admin, index) => {
      console.log(`Admin ${index + 1}:`);
      console.log('  Email:', admin.email);
      console.log('  Password Hash:', admin.password);
      console.log('  Hash length:', admin.password.length);
      console.log('');
    });

    // 2. X√≥a t·∫•t c·∫£ admin c≈©
    console.log('\n=== 2. X√ìA ADMIN C≈® ===');
    await Admin.deleteMany({});
    console.log('üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ admin c≈©');

    // 3. T·∫°o admin m·ªõi v·ªõi nhi·ªÅu password kh√°c nhau
    console.log('\n=== 3. T·∫†O ADMIN M·ªöI ===');
    
    const testPasswords = ['123456', 'admin123', 'password'];
    const createdAdmins = [];

    for (let i = 0; i < testPasswords.length; i++) {
      const password = testPasswords[i];
      const email = `admin${i + 1}@tutortrek.com`;
      
      console.log(`\nT·∫°o admin v·ªõi password: "${password}"`);
      
      // Hash password
      const hashedPassword = await hashPassword(password);
      console.log('  Hash t·∫°o ra:', hashedPassword);
      
      // L∆∞u v√†o DB
      const newAdmin = await Admin.create({
        email: email,
        password: hashedPassword
      });
      
      createdAdmins.push({
        email: email,
        password: password,
        hash: hashedPassword,
        id: newAdmin._id
      });
      
      console.log('  ‚úÖ ƒê√£ l∆∞u v√†o DB');
    }

    // 4. Test ƒëƒÉng nh·∫≠p cho t·ª´ng admin
    console.log('\n=== 4. TEST ƒêƒÇNG NH·∫¨P ===');
    
    for (const adminInfo of createdAdmins) {
      console.log(`\nTest ƒëƒÉng nh·∫≠p: ${adminInfo.email}`);
      console.log(`Password th·ª≠: "${adminInfo.password}"`);
      
      // T√¨m admin trong DB
      const adminFromDb = await Admin.findOne({ email: adminInfo.email });
      if (!adminFromDb) {
        console.log('  ‚ùå Kh√¥ng t√¨m th·∫•y admin trong DB');
        continue;
      }
      
      console.log('  üìß Email t·ª´ DB:', adminFromDb.email);
      console.log('  üîí Hash t·ª´ DB:', adminFromDb.password);
      
      // Test comparePassword
      const isPasswordCorrect = await comparePassword(adminInfo.password, adminFromDb.password);
      console.log('  üß™ K·∫øt qu·∫£ compare:', isPasswordCorrect ? '‚úÖ ƒê√öNG' : '‚ùå SAI');
      
      // Test bcrypt.compare tr·ª±c ti·∫øp
      const directCompare = await bcrypt.compare(adminInfo.password, adminFromDb.password);
      console.log('  üîç Direct bcrypt.compare:', directCompare ? '‚úÖ ƒê√öNG' : '‚ùå SAI');
    }

    // 5. T·∫°o admin ƒë∆°n gi·∫£n nh·∫•t
    console.log('\n=== 5. T·∫†O ADMIN ƒê∆†N GI·∫¢N NH·∫§T ===');
    
    await Admin.deleteMany({});
    
    const simplePassword = '123456';
    const simpleEmail = 'admin@admin.com';
    const simpleHash = await hashPassword(simplePassword);
    
    await Admin.create({
      email: simpleEmail,
      password: simpleHash
    });
    
    console.log('‚úÖ Admin ƒë∆°n gi·∫£n ƒë√£ t·∫°o:');
    console.log('üìß Email:', simpleEmail);
    console.log('üîë Password:', simplePassword);
    console.log('üîí Hash:', simpleHash);
    
    // Test final
    const finalAdmin = await Admin.findOne({ email: simpleEmail });
    const finalTest = await comparePassword(simplePassword, finalAdmin.password);
    console.log('üéØ Test cu·ªëi c√πng:', finalTest ? '‚úÖ TH√ÄNH C√îNG' : '‚ùå TH·∫§T B·∫†I');

    console.log('\n=== 6. TH√îNG TIN S·ª¨ D·ª§NG ===');
    console.log('üåê Frontend g·ªçi API: POST /api/auth/admin/admin-login');
    console.log('üìù Body g·ª≠i ƒëi:');
    console.log(`{
  "email": "${simpleEmail}",
  "password": "${simplePassword}"
}`);

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi database');
  }
}

// Ch·∫°y debug
debugAdminLogin();

/*
H∆Ø·ªöNG D·∫™N:
1. L∆∞u file n√†y th√†nh debugAdminLogin.js trong th∆∞ m·ª•c server
2. Ch·∫°y: node debugAdminLogin.js
3. Xem k·∫øt qu·∫£ chi ti·∫øt ƒë·ªÉ t√¨m l·ªói
4. S·ª≠ d·ª•ng th√¥ng tin admin ƒë∆∞·ª£c t·∫°o ·ªü b∆∞·ªõc 5
*/